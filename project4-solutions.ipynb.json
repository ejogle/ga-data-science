{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Project 4\n",
    "\n",
    "In this project, you will summarize and present your analysis from Projects 1-3."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Intro: Write a problem Statement/ Specific Aim for this project"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Answer: The aim of this project is to predict the odds of admission to graduate school."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Dataset:  Write up a description of your data and any cleaning that was completed"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Answer: This dataset contains admissions data to UCLA grad school from 400 applicants. For each student there is a binary variable indicating whether or not the student was admitted, then continuous variables for the student's GRE and GPA scores, and a categorical variable describing the prestigiousness of the student's undergraduate alma mater (ranked from 1 to 4, highest to lowest). Rather than imputing missing data, cleaning consisted of simply dropping observations that included null values in any of the columns."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "### Demo: Provide a table that explains the data by admission status"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import statsmodels.api as sm\n",
    "\n",
    "df_raw = pd.read_csv(\"../assets/admissions.csv\")\n",
    "df_rawdrop = df_raw.dropna()\n",
    "\n",
    "df_dummies = pd.get_dummies(df_rawdrop['prestige'], prefix='prestige')\n",
    "keepcols = ['admit', 'gre', 'gpa']\n",
    "df_rawdummies = df_rawdrop[keepcols].join(df_dummies.ix[:, 'prestige_1':])\n",
    "\n",
    "df_rawdummies['intercept'] = 1.0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[3.347158671586714, 3.4892063492063485, 573.5793357933579, 618.5714285714286]\n",
      "[0.37566036407993697, 0.3701771415824642, 115.83848095055255, 108.8228084002518]\n"
     ]
    }
   ],
   "source": [
    "df_admit0 = df_rawdummies[df_rawdummies.admit == 0]\n",
    "df_admit1 = df_rawdummies[df_rawdummies.admit == 1]\n",
    "\n",
    "avgGPA_no = df_admit0['gpa'].mean(axis=0)\n",
    "stdGPA_no = np.std(df_admit0['gpa'],axis=0)\n",
    "avgGRE_no = df_admit0['gre'].mean(axis=0)\n",
    "stdGRE_no = np.std(df_admit0['gre'],axis=0)\n",
    "\n",
    "avgGPA_yes = df_admit1['gpa'].mean(axis=0)\n",
    "stdGPA_yes = np.std(df_admit1['gpa'],axis=0)\n",
    "avgGRE_yes = df_admit1['gre'].mean(axis=0)\n",
    "stdGRE_yes = np.std(df_admit1['gre'],axis=0)\n",
    "\n",
    "print [avgGPA_no, avgGPA_yes, avgGRE_no, avgGRE_yes]\n",
    "print [stdGPA_no, stdGPA_yes, stdGRE_no, stdGRE_yes]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>admit</th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>All</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>prestige</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1.0</th>\n",
       "      <td>28</td>\n",
       "      <td>33</td>\n",
       "      <td>61</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2.0</th>\n",
       "      <td>95</td>\n",
       "      <td>53</td>\n",
       "      <td>148</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3.0</th>\n",
       "      <td>93</td>\n",
       "      <td>28</td>\n",
       "      <td>121</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4.0</th>\n",
       "      <td>55</td>\n",
       "      <td>12</td>\n",
       "      <td>67</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>All</th>\n",
       "      <td>271</td>\n",
       "      <td>126</td>\n",
       "      <td>397</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "admit       0    1  All\n",
       "prestige               \n",
       "1.0        28   33   61\n",
       "2.0        95   53  148\n",
       "3.0        93   28  121\n",
       "4.0        55   12   67\n",
       "All       271  126  397"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.crosstab(df_rawdrop.prestige, df_rawdrop.admit,margins=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "| Not Admitted | Admitted\n",
    "---| ---|---\n",
    "GPA | 3.35 (0.38)  | 3.49 (0.37)\n",
    "GRE | 574 (116) | 619 (109)\n",
    "Prestige 1 | 7.1% | 8%\n",
    "Prestige 2 | 24% | 13.4%\n",
    "Prestige 3 | 23.4% | 7.1%\n",
    "Prestige 4 | 14% | 3%"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Methods: Write up the methods used in your analysis"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Answer: After dropping observations with null values for any variables, logistic regression was performed on the remaining observations to predict the odds of grad school admittance. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Results: Write up your results"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Answer: As expected, the odds of UCLA grad school admittance decrease as the prestigiousness of the undergrad alma mater decrease. Mean GPA and GRE scores for admitted students are higher than non-admitted students, indicating higher undergrad academic achievement. From the sample population, however, a very small number of students--approximately 3%--from the lowest ranked schools managed to get admitted. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Visuals: Provide a table or visualization of these results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Optimization terminated successfully.\n",
      "         Current function value: 0.573854\n",
      "         Iterations 6\n",
      "<bound method Logit.score of <statsmodels.discrete.discrete_model.Logit object at 0x103ec3190>>\n",
      "gre             1.002221\n",
      "gpa             2.180027\n",
      "prestige_2.0    0.506548\n",
      "prestige_3.0    0.262192\n",
      "prestige_4.0    0.211525\n",
      "intercept       0.020716\n",
      "dtype: float64\n"
     ]
    }
   ],
   "source": [
    "df_rawdummies = df_rawdrop[keepcols].join(df_dummies.ix[:, 'prestige_2':])\n",
    "df_rawdummies['intercept'] = 1.0\n",
    "\n",
    "train_cols = df_rawdummies.columns[1:]\n",
    "\n",
    "logit = sm.Logit(df_rawdummies['admit'], df_rawdummies[train_cols])\n",
    "result = logit.fit()\n",
    "\n",
    "params = result.params\n",
    "conf = result.conf_int()\n",
    "conf['OR'] = params\n",
    "conf.columns = ['2.5%', '97.5%', 'OR']\n",
    "\n",
    "OR_summary = np.exp(params)\n",
    "\n",
    "print logit.score\n",
    "print OR_summary"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "OR_list = [1.002221, 2.180027, 0.506548, 0.262192, 0.211525] \n",
    "\n",
    "plt.plot(OR_list)\n",
    "plt.ylabel('Odds Ratio by Predictor')\n",
    "print plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Discussion: Write up your discussion and future steps"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Answer: Again, this analysis indicates the general importance of the prestigiousness of one's undergrad alma mater in getting admitted to grad school (at UCLA, at least). From a demographics standpoint, the subgroup of admitted students from #4 schools points towards an interesting study to determine how their average GPA and GRE scores compared to the rest of the sample, and the relative importance of those scores in determining an admittance outcome, within #4 students and across the sample at large. More records of #4, admitted students could be compiled and analyzed to look for ways to close the grad school admittance gap for students from the least prestigious schools."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
